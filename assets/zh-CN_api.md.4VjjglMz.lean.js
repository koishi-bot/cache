import{_ as a,l as t,a4 as c,a as l}from"./chunks/framework.CbaIy4cH.js";const b=JSON.parse('{"title":"API","description":"","frontmatter":{},"headers":[],"relativePath":"zh-CN/api.md","filePath":"zh-CN/api.md"}'),o={name:"zh-CN/api.md"};function r(i,e,s,n,d,h){return l(),t("div",null,e[0]||(e[0]=[c('<h1 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h1><h2 id="公开方法" tabindex="-1">公开方法 <a class="header-anchor" href="#公开方法" aria-label="Permalink to &quot;公开方法&quot;">​</a></h2><h3 id="ctx-cache-get" tabindex="-1">ctx.cache.get(table, key) <a class="header-anchor" href="#ctx-cache-get" aria-label="Permalink to &quot;ctx.cache.get(table, key)&quot;">​</a></h3><ul><li><strong>table:</strong> <code>string</code> 表名</li><li><strong>key:</strong> <code>string</code> 键名</li><li>返回值: <code>Promise&lt;any&gt;</code></li></ul><p>获取缓存数据。</p><h3 id="ctx-cache-set" tabindex="-1">ctx.cache.set(table, key, value, maxAge?) <a class="header-anchor" href="#ctx-cache-set" aria-label="Permalink to &quot;ctx.cache.set(table, key, value, maxAge?)&quot;">​</a></h3><ul><li><strong>table:</strong> <code>string</code> 表名</li><li><strong>key:</strong> <code>string</code> 键名</li><li><strong>value:</strong> <code>any</code> 缓存数据</li><li><strong>maxAge:</strong> <code>number</code> 缓存时间 (毫秒)</li><li>返回值: <code>Promise&lt;void&gt;</code></li></ul><p>设置缓存数据。当未设置 <code>maxAge</code> 时，将使用缓存表的设置。</p><h3 id="ctx-cache-delete" tabindex="-1">ctx.cache.delete(table, key) <a class="header-anchor" href="#ctx-cache-delete" aria-label="Permalink to &quot;ctx.cache.delete(table, key)&quot;">​</a></h3><ul><li><strong>table:</strong> <code>string</code> 表名</li><li><strong>key:</strong> <code>string</code> 键名</li><li>返回值: <code>Promise&lt;void&gt;</code></li></ul><p>删除缓存数据。</p><h3 id="ctx-cache-clear" tabindex="-1">ctx.cache.clear(table) <a class="header-anchor" href="#ctx-cache-clear" aria-label="Permalink to &quot;ctx.cache.clear(table)&quot;">​</a></h3><ul><li><strong>table:</strong> <code>string</code> 表名</li><li>返回值: <code>Promise&lt;void&gt;</code></li></ul><p>清空缓存表。</p><h3 id="ctx-cache-keys" tabindex="-1">ctx.cache.keys(table) <a class="header-anchor" href="#ctx-cache-keys" aria-label="Permalink to &quot;ctx.cache.keys(table)&quot;">​</a></h3><ul><li><strong>table:</strong> <code>string</code> 表名</li><li>返回值: <code>AsyncIterable&lt;string&gt;</code></li></ul><p>获取缓存表的所有键名。</p><h3 id="ctx-cache-values" tabindex="-1">ctx.cache.values(table) <a class="header-anchor" href="#ctx-cache-values" aria-label="Permalink to &quot;ctx.cache.values(table)&quot;">​</a></h3><ul><li><strong>table:</strong> <code>string</code> 表名</li><li>返回值: <code>AsyncIterable&lt;any&gt;</code></li></ul><p>获取缓存表的所有值。</p><h3 id="ctx-cache-entries" tabindex="-1">ctx.cache.entries(table) <a class="header-anchor" href="#ctx-cache-entries" aria-label="Permalink to &quot;ctx.cache.entries(table)&quot;">​</a></h3><ul><li><strong>table:</strong> <code>string</code> 表名</li><li>返回值: <code>AsyncIterable&lt;[string, any]&gt;</code></li></ul><p>获取缓存表的所有键值对。</p><h3 id="ctx-cache-foreach" tabindex="-1">ctx.cache.forEach(table, callback) <a class="header-anchor" href="#ctx-cache-foreach" aria-label="Permalink to &quot;ctx.cache.forEach(table, callback)&quot;">​</a></h3><ul><li><strong>table:</strong> <code>string</code> 表名</li><li><strong>callback:</strong> <code>(value: any, key: string) =&gt; Awaitable&lt;void&gt;</code></li><li>返回值: <code>Promise&lt;void&gt;</code></li></ul><p>遍历缓存表。</p>',26)]))}const u=a(o,[["render",r]]);export{b as __pageData,u as default};
